{"version":3,"sources":["types/SelectStatus.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SelectStatus","TodoList","todos","selectTodo","setSelectTodo","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","setSelectStatus","query","setQuery","onChange","event","target","value","ALL","ACTIVE","COMPLETED","placeholder","length","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","loading","setLoading","useEffect","userId","catch","error","Error","message","finally","href","email","name","App","setTodos","isLoading","setisLoading","errorMessage","setErrorMessage","selectStatus","visibleTodos","useMemo","preparedTodos","filter","trim","toLocaleUpperCase","includes","getPreparedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf66a5ee.chunk.js","sourcesContent":["export enum SelectStatus {\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n  ALL = 'all',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectTodo: Todo | null,\n  setSelectTodo: (selectTodo: Todo | null) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos, selectTodo, setSelectTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className=\"\"\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames(todo.completed === true\n                ? 'has-text-success' : 'has-text-danger')}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => setSelectTodo(todo)}\n            >\n              <span className=\"icon\">\n                <i className={classNames(todo.id !== selectTodo?.id\n                  ? 'far fa-eye' : 'far fa-eye-slash')}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { SelectStatus } from '../../types/SelectStatus';\n\ntype Props = {\n  setSelectStatus: (select: SelectStatus) => void;\n  query:string;\n  setQuery:(query:string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  setSelectStatus, query, setQuery,\n}) => {\n  const handleChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectStatus(event.target.value as SelectStatus);\n  };\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleChangeSelect}\n          >\n            <option value={SelectStatus.ALL}>All </option>\n            <option value={SelectStatus.ACTIVE}>Active</option>\n            <option value={SelectStatus.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          value={query}\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={handleChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.length > 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n  setSelectTodo: (selectTodo: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo, setSelectTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    getUser(todo.userId)\n      .then((setUser))\n      .catch((error) => {\n        throw new Error(error.message);\n      })\n      .finally(() => setLoading(false));\n  }, [todo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {!todo.completed\n                ? (<strong className=\"has-text-success\">Planned</strong>)\n                : (<strong className=\"has-text-danger\">Done</strong>)}\n              {' by '}\n              {user && (\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\n// eslint-disable-next-line import/no-cycle\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { SelectStatus } from './types/SelectStatus';\n\nfunction getPreparedTodos(todos: Todo[], selectStatus: SelectStatus, query: string) {\n  let preparedTodos = [...todos];\n\n  if (selectStatus) {\n    preparedTodos = preparedTodos.filter(todo => {\n      switch (selectStatus) {\n        case SelectStatus.ACTIVE: {\n          return !todo.completed;\n        }\n\n        case SelectStatus.COMPLETED: {\n          return todo.completed;\n        }\n\n        default:\n          return true;\n      }\n    });\n  }\n\n  if (query.trim()) {\n    preparedTodos = preparedTodos.filter(todo => todo.title.toLocaleUpperCase().includes(query.toLocaleUpperCase()));\n  }\n\n  return preparedTodos;\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setisLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [selectStatus, setSelectStatus] = useState<SelectStatus>(SelectStatus.ALL);\n  const [query, setQuery] = useState('');\n  const [selectTodo, setSelectTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    setisLoading(true);\n    getTodos()\n      .then(setTodos)\n      .catch(error => setErrorMessage(error.message))\n      .finally(() => setisLoading(false));\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return getPreparedTodos(todos, selectStatus, query);\n  }, [todos, selectStatus, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            {isLoading && (\n              <Loader />\n            )}\n            <div className=\"block\">\n              <TodoFilter\n                setSelectStatus={setSelectStatus}\n                query={query}\n                setQuery={setQuery}\n              />\n            </div>\n\n            {!errorMessage && (\n              <div className=\"block\">\n                <TodoList\n                  todos={visibleTodos}\n                  selectTodo={selectTodo}\n                  setSelectTodo={setSelectTodo}\n                />\n              </div>\n            )}\n\n          </div>\n        </div>\n      </div>\n\n      {selectTodo && (\n        <TodoModal\n          todo={selectTodo}\n          setSelectTodo={setSelectTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}